<?php

/**
 * @file
 * This file provides an interface to the media mover objects (configurations,
 * steps, files).
 */

/**
 * @TODO Document Document Document
 * @TODO Improve select ops to declare if they can run on a single node
 * @TODO Add simple tests for API intgrity
 * @TODO rename "steps" "actions" and replace current "action" with "action_id"
 */


/* ************************************************ */
/* Definitions */
/* ************************************************ */

// Files directory.
define('MMA_FILES_DIR', 'media_mover');

// Defines the configuration statuses.
define('MMA_CONFIG_STATUS_DISABLED', 'disabled');
// Standard configuration status.
define('MMA_CONFIG_STATUS_ENABLED', 'enabled');
// Configuration loaded from code.
define('MMA_CONFIG_STATUS_DEFAULT', 'default');
// Configuration loaded from code and modified.
define('MMA_CONFIG_STATUS_OVERRIDDEN', 'overridden');
// Configuration loaded from code and disabled.
define('MMA_CONFIG_STATUS_DEFAULT_DISABLED', 'default_disabled');
define('MMA_CONFIG_STATUS_OVERRIDDEN_DISABLED', 'overridden_disabled');

// Define the step statuses.
define('MMA_STEP_STATUS_READY', 'ready');
define('MMA_STEP_STATUS_RUNNING', 'running');
define('MMA_STEP_STATUS_REMOVE', 'remove');
define('MMA_STEP_STATUS_DELETED', 'deleted');

// File statuses.
define('MMA_FILE_STATUS_READY', 'ready');
define('MMA_FILE_STATUS_LOCKED', 'locked');
define('MMA_FILE_STATUS_QUEUED', 'queued');
define('MMA_FILE_STATUS_ERROR', 'error');
define('MMA_FILE_STATUS_FINISHED', 'finished');
define('MMA_FILE_STATUS_DELETED', 'deleted');

define('MMA_ACTION_TYPE_NORMAL', 'normal');
define('MMA_ACTION_TYPE_SELECT', 'select');
define('MMA_ACTION_TYPE_ALL', 'all');
define('MMA_ACTION_TYPE_BOTH', 'both');

// Path to media mover menu items.
define('MMA_MENU_PATH', 'admin/config/media/media-mover');
// Path length, used for calculating argument length.
define('MMA_MENU_PATH_LENGTH', 4);

/* ************************************************ */
/* Drupal Hooks                                     */
/* ************************************************ */

/**
 * Implements hook_cron().
 *
 * Runs all active configurations
 *
 * @ingroup drupal_hooks
 */
function media_mover_api_cron() {
  $select_queue = DrupalQueue::get('media_mover_api_queue_select');
  $file_queue = DrupalQueue::get('media_mover_api_configuration_process');
  // Grab active configurations.
  $configurations = media_mover_api_configurations_load(MMA_CONFIG_STATUS_ENABLED);
  foreach ($configurations as $configuration) {
    // Add the select step to the queue.
    $select_queue->createItem($configuration);
    // Find files ready for process.
    $files = $configuration->get_files(MMA_FILE_STATUS_READY);
    foreach ($files as $file) {
      if ($file->queue(MMA_FILE_STATUS_READY, MMA_FILE_STATUS_QUEUED)) {
        $file_queue->createItem($file);
      }
    }
  }
}


/**
 * Implements hook_cron_queue_info().
 */
function media_mover_api_cron_queue_info() {
  $queues['media_mover_api_configuration_process'] = array(
    'worker callback' => 'media_mover_api_queue_file_process_worker',
    'time' => variable_get('media_mover_api_queue_file_process_worker_time', 6000),
  );
  $queues['media_mover_api_queue_select'] = array(
    'worker callback' => 'media_mover_api_queue_select_worker',
    'time' => variable_get('media_mover_api_queue_select_worker_time', 60),
  );
  $queues['media_mover_api_queue_file_delete'] = array(
    'worker callback' => 'media_mover_api_queue_file_delete_worker',
    'time' => variable_get('media_mover_api_queue_file_delete_worker_time', 60),
  );
  return $queues;
}


/**
 * Implements hook_flush_caches().
 */
function media_mover_api_flush_caches() {
  return array('cache_media_mover');
}


/**
 * Ensure that this configuration can run.
 *
 * @param object $configuration
 *   Media mover configuration object
 */
function media_mover_api_configuration_code_validate($configuration) {
  // Investigate each of the steps.
  foreach ($configuration->steps as $import_step) {
    // Do a module dependency check.
    if (!module_exists($import_step->build['module'])) {
      watchdog('media_mover_api', 'The module: %module is required for this
        configuration but is not installed. In order to use this configuration
        you will need to install it.',
        array('%module' => $import_step->module),
        WATCHDOG_ERROR
      );
      return FALSE;
    }
    // Check to see if this sid exists.
    if ($step = media_mover_api_step_get($import_step->sid)) {
      // Check to see that the build and settings values are the same.
      if ($import_step->settings != $step->settings) {
        watchdog('media_mover_api', 'The step %step already exists however it
          does not match the one that you are trying to load',
          array('%step' => $import_step->name)
        );
        return FALSE;
      }
    }
  }
  return TRUE;
}


/**
 * Revert a configuration to its code state.
 */
function media_mover_api_configuration_code_revert($configuration) {
  $configurations = media_mover_api_configurations_in_code();
  if ($configurations[$cid]) {
    // @TODO probably should validate the code configuration?
    $configurations[$configuration->cid]->status == MMA_CONFIG_STATUS_DEFAULT;
    $configurations[$configuration->cid]->save();
    return TRUE;
  }
  return FALSE;
}

/* ************************************************ */
/* Media Mover queue workers                        */
/* ************************************************ */


/**
 * Queue worker to process a file.
 *
 * @param object $file
 *   Media Mover file
 */
function media_mover_api_queue_file_process_worker($file) {
  // Dequeue and run the file.
  if ($file->dequeue()) {
    if ($file->process_next()) {
      // @TODO is there anything else that needs to happen?
      // Aborted due to run time controls? Try again later.
      $file->unlock();
      // $file->status_set(MMA_FILE_STATUS_FINISHED, MMA_FILE_STATUS_READY);
    }
  }
}


/**
 * Queue worker for file deletion.
 *
 * @param object $file
 *   Media Mover file
 */
function media_mover_api_queue_file_delete_worker($file) {
  $file->delete();
  cache_clear_all('media_mover_files_' . $file->mmfid, 'cache_media_mover', TRUE);
}


/**
 * Queue worker function to select files.
 *
 * @param object $configuration
 *   Media Mover configuration object
 */
function media_mover_api_queue_select_worker($configuration) {
  $configuration->run_step($configuration->steps[0]);
}


/* ************************************************ */
/* Internal functions                               */
/* ************************************************ */


/**
 * Returns all step data in the system, or a specified module/action pair.
 *
 * @param string $action_string
 *   MODULE--ACTION
 * @param string $action_id
 *   Id of the action if a module is passed in as $action_string
 *
 * @return array
 *   Step data
 */
function media_mover_api_step_configuration_get($action_string, $action_id = FALSE) {
  if ($action_id) {
    $action_string = $action_string . '--' . $action_id;
  }
  // Get all the actions.
  $actions = media_mover_api_actions_build_get(MMA_ACTION_TYPE_BOTH);
  return $actions[$action_string];
}


/**
 * Return step build data.
 *
 * @param string $module
 *   Module name or MODULE--ID
 * @param string $id
 *   Id of the step build data
 *
 * @return array
 *   Step data
 */
function media_mover_api_action_build_get($module, $id = FALSE) {
  if (!$id) {
    $data = explode('--', $module);
    $module = $data[0];
    $id = $data[1];
  }
  return media_mover_api_actions_build_get(FALSE, $module, $id);
}


/**
 * Return data for a step action, all actions of type, or all actions.
 *
 * @param string $type
 *   One of MMA_ACTION_TYPE_NORMAL, MMA_ACTION_TYPE_SELECT,
 *   MMA_ACTION_TYPE_BOTH
 * @param string $request_module
 *   Name of the module which defines the action
 * @param string $request_action_id
 *   The id of the specific action
 *
 * @return array
 *   Step data
 */
function media_mover_api_actions_build_get($type = MMA_ACTION_TYPE_NORMAL, $request_module = FALSE, $request_action_id = FALSE) {
  static $data;
  if (!$data) {
    $data = array(
      MMA_ACTION_TYPE_NORMAL => array(),
      MMA_ACTION_TYPE_SELECT => array(),
      MMA_ACTION_TYPE_BOTH => array(),
    );

    foreach (module_implements('media_mover') as $module) {
      // Fire the hook to get the list of module actions and parse the actions
      // and put them in a usable format.
      if ($actions = module_invoke($module, 'media_mover')) {
        foreach ($actions as $action_id => $action) {
          // Create the unique action id.
          $action['action_id'] = $action_id;
          // Add the module to the data.
          $action['module'] = $module;
          // Store this with select or normal actions.
          $action_type = isset($action['select']) ? MMA_ACTION_TYPE_SELECT : MMA_ACTION_TYPE_NORMAL;
          // Key this by the action type.
          $data[$action_type][$module . '--' . $action_id] = $action;
          // We also store the modules by module.
          $data[$module][$action_id] = $action;
        }
      }
    }
  }

  // If specific data has been requested.
  if ($request_module && $request_action_id) {
    return $data[$request_module][$request_action_id];
  }
  // Return non select actions.
  if ($type == MMA_ACTION_TYPE_NORMAL) {
    return $data[MMA_ACTION_TYPE_NORMAL];
  }
  if ($type == MMA_ACTION_TYPE_SELECT) {
    return $data[MMA_ACTION_TYPE_SELECT];
  }
  if ($type == MMA_ACTION_TYPE_BOTH) {
    return array_merge($data[MMA_ACTION_TYPE_SELECT], $data[MMA_ACTION_TYPE_NORMAL]);
  }
}


/* ************************************************ */
/* Directory and file functions                     */
/* ************************************************ */

/**
 * Create a media mover path for a file with a scheme.
 *
 * Creates a path based on a configuration id, step id, and the path name.
 * Returns a URI either the default Drupal file scheme or one passed in
 *
 * @param string $cid
 *   Configuration id
 * @param string $sid
 *   Step id
 * @param string $filename
 *   Filename
 * @param string $scheme
 *   URI scheme
 *
 * @return string
 *   Filepath
 */
function media_mover_api_create_local_path($cid, $sid, $filename, $scheme = 'public://') {
  // Path is relative to drupal files dir.
  $directory = $scheme . MMA_FILES_DIR . '/' . $cid . '/' . $sid;
  $success = file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
  if (!$success) {
    return FALSE;
  }

  // Ensure that the target directory exists.
  file_prepare_directory($directory, FILE_CREATE_DIRECTORY);
  // Ensure that the filename is unique.
  $path = file_create_filename($filename, $directory);

  // @Note drupal_realpath() is supposedly depricated, however it is a crtical
  // part of being able to handle local file manipulations. see:
  // http://api.drupal.org/api/drupal/includes!file.inc/function/drupal_realpath/7
  $path = drupal_realpath($path);

  return $path;
}

/**
 * Prepare a directory for storing a file.
 *
 * @param string $cid
 *   Configuration id
 * @param string $sid
 *   Step id
 * @param string $scheme
 *   URI scheme
 *
 * @return string
 *   Path to directory
 */
function media_mover_api_prepare_directory($cid, $sid, $scheme = 'public://') {
  // Path is relative to drupal files dir.
  $path = $scheme . MMA_FILES_DIR . '/' . $cid . '/' . $sid;
  file_prepare_directory($path, FILE_CREATE_DIRECTORY);
  return $path;
}


/**
 * Creates a path for a file.
 *
 * This is a customized version of Drupal's file path function so that
 * the entire uri is created when requested. It is a placeholder
 * function now to prevent lots of changes to modules when file handling
 * changes (think D7).
 *
 * @NOTE this is a big problem if the file directory is non local.
 * @TODO this function needs to be revised.
 *
 * @param string $uri
 *   File path to check against to return a good path
 * @param bool $create
 *   Should the directory be created?
 *
 * @return string
 *   Path to file
 */
function media_mover_api_dir_path1($uri = NULL, $create = TRUE) {

  // @NOTE this assumes local file path YUCK!
  $files_dir = media_mover_api_file_is_local(file_default_scheme());

  // Path is relative to drupal files dir.
  $path = MMA_FILES_DIR . '/' . $file->cid . '/' . $step->sid . '/';

  if ($uri) {
    // Return the full path relative to the drupal files directory.
    $return_path = $path . $uri;

    // Should we create the directory if it does.
    if ($create) {

      // Check to see if there is a file extension on the file path and
      // remove the file if it exists.
      if (strpos(basename($uri), '.') !== FALSE) {
        $uri = dirname($uri);
      }
      $directories = array();

      // Get all the directories that we need create.
      foreach (explode('/', $uri) as $directory) {
        // Create the filepath from the list of directories already used.
        $create_dir = $path . ($directories ? implode('/', $directories) . '/' : '') . $directory;
        file_prepare_directory($create_dir, FILE_CREATE_DIRECTORY);
        // Add the new directory onto the path.
        $directories[] = $directory;
      }
    }
  }
  else {
    $return_path = $path;
  }

  return $return_path;
}


/**
 * Creates a default uri using the CID and SID for this file.
 *
 * @param object $file
 *   Media Mover file object
 *
 * @return string
 *   Filepath
 */
// @todo: move this function into media_mover_file class method (this function is UNUSED anyway, maybe remove?). also looks like new $file->get_uri($step_order) does similar work.
function media_mover_api_file_path($file) {
  if (isset($file->data['steps'])) {
    $steps = $file->data['steps'];
    if (isset($steps[$file->step_order])) {
      $sid = $steps[$file->step_order]['sid'];
      return media_mover_api_dir_path($file->cid . '/' . $sid);
    }
  }
  return FALSE;
}


/**
 * Global permissions set.
 *
 * It lets an admin set global file perms and then the modules don't have to
 * worry about it.
 */
function media_mover_api_set_file_perm($uri) {
  if (variable_get('mma_file_perm', TRUE)) {
    if ($oct = variable_get('mma_file_mask', NULL)) {
      $perms = octdec($oct);
    }
    else {
      $perms = 0644;
    }
    @chmod($uri, $perms);
  }
}


/**
 * Valdiate a file's extension against a set of extensions.
 *
 * This is a slight change of the D6 function to make it useful for MM. This
 * checks a file path against a list of file extensions. Returns TRUE if the
 * extension is in the list or if no extensions are passed
 *
 * @param string $uri
 *   Filename or uri
 * @param string $extensions
 *   Space seperated list of extensions
 *
 * @return bool
 *   Is this extension valid?
 */
function media_mover_api_file_validate_extensions($uri, $extensions = FALSE) {
  if (!$extensions) {
    return TRUE;
  }
  $regex = '/\.(' . ereg_replace(' +', '|', preg_quote($extensions)) . ')$/i';
  if (preg_match($regex, basename($uri))) {
    return TRUE;
  }
  return FALSE;
}


/**
 * Create a unique machine name from a string for a configuration or a step.
 *
 * @param string $id
 *   Id to check
 * @param string $type
 *   One of configuration, step
 *
 * @return string
 *   Machine name
 */
function media_mover_api_machine_name_create($id, $type = 'configuration') {
  // Remove all non-alphanumeric characters.
  $id = drupal_strtolower(preg_replace("/[^a-zA-Z0-9_]/", '_', $id));
  $i = 1;
  while (media_mover_api_machine_name_exists($id, $type)) {
    // Increment the $id if it exists.
    if (preg_match("/_([0-9]*)$/", $string)) {
      $id = preg_replace("/_([0-9]*)$/", '_' . $i, $id);
    }
    else {
      $id .= '_' . $i;
    }
    $i++;
  }
  // Save the geneated id for future checks. Asuming that the issued new id will
  // be used for saving.
  media_mover_api_machine_name_exists(NULL, $type, array($id => 1));
  return $id;
}


/**
 * Helper function to test if the $id exists.
 *
 * @param string $id
 *   Id
 * @param string $type
 *   One of configuration or step
 *
 * @return bool
 *   Does this id exist?
 */
function media_mover_api_machine_name_exists($id, $type = 'configuration') {
  switch ($type) {
    case 'configuration':
      return media_mover_api_configuration_machine_name_exists($id);

    case 'step':
      return media_mover_api_step_machine_name_exists($id);
  }
}


/**
 * Check for configuration id existance.
 *
 * @param string $cid
 *   Media mover configuration id
 *
 * @return bool
 *   Configuration id exists
 */
function media_mover_api_configuration_machine_name_exists($cid, $add_cids = array()) {
  // Cache the results.
  $cids = &drupal_static(__FUNCTION__);
  // @TODO: call
  // drupal_static_reset('media_mover_api_configuration_machine_name_exists');
  // whenever write to {media_mover_configurations} is done.
  if (!isset($cids)) {
    $cids = array();
  }
  if ($add_cids) {
    $cids = array_merge($cids, $add_cids);
  }
  if (!$cid) {
    return FALSE;
  }

  if (!isset($cids[$cid])) {
    $query = db_select('media_mover_configurations', 'mmc');
    $query->condition('mmc.cid', $cid);
    $query->addExpression('COUNT(1)');
    $cids[$cid] = $query->execute()->fetchField();
  }
  return $cids[$cid];
}


/**
 * Check for step id existence.
 *
 * @param string $sid
 *   Media mover step id
 *
 * @return bool
 *   Step name exists
 */
function media_mover_api_step_machine_name_exists($sid, $add_sids = array()) {
  // Cache the results.
  $sids = &drupal_static(__FUNCTION__);
  // @TODO: call
  // drupal_static_reset('media_mover_api_step_machine_name_exists');
  // whenever write to {media_mover_steps} is done
  if (!isset($sids)) {
    $sids = array();
  }
  if ($add_sids) {
    $sids = array_merge($sids, $add_sids);
  }
  if (!$sid) {
    return FALSE;
  }
  if (!isset($sids[$sid])) {
    $query = db_select('media_mover_steps', 'mms');
    $query->condition('mms.sid', $sid);
    $query->addExpression('COUNT(1)');
    $sids[$sid] = $query->execute()->fetchField();
  }
  return $sids[$sid];
}


/* ****************************************** */
/* MEDIA MOVER FILE FUNCTIONS                 */
/* ****************************************** */

/**
 * Returns an array of item statuses or text for status.
 *
 * @param string $status
 *   Value of status to return (optional)
 *
 * @return array
 *   Returns an array of statuses or a string for the specific status
 */
function media_mover_api_file_status($status = NULL) {
  $states = array(
    MMA_FILE_STATUS_ERROR => t('Error'),
    MMA_FILE_STATUS_LOCKED => t('Locked'),
    MMA_FILE_STATUS_QUEUED => t('Queued'),
    MMA_FILE_STATUS_READY => t('Ready'),
    MMA_FILE_STATUS_FINISHED => t('Finished'),
    MMA_FILE_STATUS_DELETED => t('Deleting'),
  );
  if ($status) {
    return $states[$status];
  }
  return $states;
}


/**
 * Selects multiple files. Used for the simplest cases.
 *
 * @TODO this function needs serious refactoring.
 *
 * @param array $conditions
 *   Array of conditions to select by, each condition is an associative
 *   array with keys 'field', 'value', 'operator'.
 *
 * @return array
 *   Returns an array of Media Mover files
 */
function media_mover_api_files_get($conditions = array()) {
  $query = db_select('media_mover_files', 'mmf');
  $query->fields('mmf', array('mmfid'));
  if (empty($conditions)) {
    $conditions = array(
      array(
        'field' => 'status',
        'value' => MMA_FILE_STATUS_READY,
        'operator' => '=',
      ),
    );
  }

  foreach ($conditions as $condition) {
    if (!empty($condition['operator'])) {
      $query->condition($condition['field'], $condition['value'], $condition['operator']);
    }
    else {
      $query->condition($condition['field'], $condition['value']);
    }
  }

  $results = $query->execute();

  $items = array();
  foreach ($results as $result) {
    $item = media_mover_api_mmfile_load($result->mmfid, TRUE);
    $items[] = $item;
  }
  return $items;
}


/**
 * Loads a complete media mover file.
 *
 * @param int $mmfid
 *   Media Mover file id
 * @param bool $cache
 *   Attempt to load from cache
 *
 * @return object
 *   Media Mover file object
 */
function media_mover_api_mmfile_load($mmfid, $cache = TRUE) {
  $files = &drupal_static(__FUNCTION__);
  if (!isset($files)) {
    $files = array();
  }
  if (!$cache || !isset($files[$mmfid])) {
    // No local cache, attempt to load the file.
    $file = new media_mover_file($mmfid);
    // File does not exist.
    if (empty($file->mmfid)) {
      $file = FALSE;
    }
    elseif (!empty($file->errors)) {
      watchdog('media_mover_api', implode('<br />'), $this->errors, WATCHDOG_ERROR);
      $file = FALSE;
    }
    $files[$mmfid] = $file;
  }
  return $files[$mmfid];
}


/**
 * Fetch files by fid and module.
 *
 * @TODO setup caching!
 */
function media_mover_api_file_get_fid($fid, $module = FALSE, $reset = FALSE) {
  if (!$module) {
    $results = db_query('SELECT mmfid FROM {media_mover_files} WHERE fid = :fid', array(':fid' => $fid));
  }
  else {
    $results = db_query("SELECT mmf.mmfid FROM {media_mover_files} mmf
      LEFT JOIN {media_mover_steps} mms ON mms.cid = mmf.cid
      WHERE mms.module = :module AND
        mmf.fid = :fid", array(':module' => $module, ':fid' => $fid));
  }
  $results->execute();
  while ($result = $results->fetchField()) {
    $files[$result] = media_mover_api_mmfile_load($result);
  }
  return $files;
}


/**
 * Create a derivative file from the one passed in.
 *
 * @param object $file
 *   Media Mover file
 * @param string $new_uri
 *   Optional for the new uri
 * @param string $status
 *   Optional new file status
 *
 * @return object
 *   Media Mover file
 */
function media_mover_api_file_create_derivative($file, $new_uri = FALSE, $status = MMA_FILE_STATUS_READY) {
  // Create a copy of the current file that will be the derivative.
  $new_mmfile = clone $file;
  // Remove the ID so we can save as a new file.
  unset($new_mmfile->mmfid);
  // Store parent id.
  $new_mmfile->data_set('parent', $file->mmfid);
  // Do we need to change the uri?
  if ($new_uri) {
    $new_mmfile->uri = $new_uri;
  }
  // Set the new status.  May be overridden during save by call to step_next.
  $new_mmfile->status = $status;
  // $new_mmfile->step_next();
  // Save the new file with status set for the next step in the process.
  $new_mmfile->save();
  // Updates the status and allows for new operations.
  $new_mmfile->unlock();
  return $new_mmfile;
}


/**
 * Utility function to check if a file is local to the Drupal file system.
 *
 * @param string $uri
 *   File uri
 *
 * @return string
 *   local path or FALSE
 */
function media_mover_api_file_is_local($uri) {
  // If the uri has a scheme.
  if (file_stream_wrapper_valid_scheme(file_uri_scheme($uri))) {
    // @todo drupal_realpath() function is deprecated, and should be removed.
    $filepath = drupal_realpath($uri);
    if (file_exists($filepath)) {
      return $filepath;
    }
  }
  // URI does not have a scheme.
  elseif (file_exists($uri)) {
    return $uri;
  }
  return FALSE;
}

/* ******************************************************** */
/* CONFIGURATION functions                                  */
/* ******************************************************** */

/**
 * Get all configurations.
 *
 * @param string $status
 *   Status of configurations to return
 *
 * @return array
 *   Returns an array of configuration objects
 */
function media_mover_api_configurations_load($status = FALSE) {
  $configurations = array();
  $query = db_select('media_mover_configurations', 'mmc')
    ->fields('mmc', array('cid'));

  // Load by status.
  if ($status) {
    $query->condition('status', $status);
  }

  $results = $query->execute();
  if ($results) {
    while ($record = $results->fetchObject()) {
      $configurations[$record->cid] = media_mover_api_configuration_load($record->cid);
    }
  }
  return $configurations;
}


/**
 * Takes a CID and returns the full configuration object.
 *
 * Uses a local cache to store config data to prevent multiple hits the DB.
 *
 * @param string $cid
 *   Configuration id
 *
 * @return object
 *   Media Mover configuration
 */
function media_mover_api_configuration_load($cid) {
  $configuration = new media_mover_configuration();
  if ($configuration->load($cid)) {
    return $configuration;
  }
  return FALSE;
}


/**
 * Gets a list of configurations that implement the specified module.
 *
 * @param string $module_name
 *   Module name
 * @param string $action
 *   Action name
 *
 * @return array
 *   Configurations that implement step
 */
function media_mover_api_configurations_get_by_module($module_name, $action = NULL) {
  if ($module_name) {
    $conditions[] = 'module = :module';
  }
  if ($action) {
    $conditions[] = 'action = :action';
  }

  // Find all the media mover steps that use specified module.
  $results = db_query('SELECT sid FROM {media_mover_steps} WHERE ' . implode(' AND ', $conditions), array(
    ':module' => $module_name,
    ':action' => $action,
  ))->execute();
  while ($record = $results->fetchAssoc()) {
    // Now we find all of the configurations that utilize this step.
    $configurations = db_query("SELECT cid FROM {media_mover_steps} WHERE sid = :sid", array(
      array(':sid' => $result['sid'])
    ))->execute();
    while ($cid = $configurations->fetchField()) {
      $configuration = media_mover_api_configuration_load($cid);
      $options[$configuration->cid] = $configuration->name;
    }
  }
  if (count($options)) {
    return $options;
  }
}


/**
 * Retrieves all the configurations that implement this step.
 *
 * @param string $sid
 *   Step id
 *
 * @return object
 *   Configuration objects
 */
function media_mover_api_configurations_by_sid($sid) {
  $configurations = array();
  $results = db_query('SELECT cid FROM {media_mover_steps} WHERE sid = :sid', array(':sid' => $sid))->execute();
  while ($cid = $results->fetchField()) {
    $configurations[$cid] = media_mover_api_configuration_load($cid);
  }
  return $configurations;
}


/**
 * Get queue stats for this function.
 *
 * @param object $configuration
 *   Media Mover configuration
 *
 * @return string
 *   Status for this configuration
 */
function media_mover_api_configuration_stats($configuration, $status = NULL) {
  if ($step_order) {
    $steps = array($configuration->steps[$step_order]);
  }
  else {
    $steps = $configuration->steps;
  }
  foreach ($steps as $step) {
    $results = db_query('SELECT status, count(mmfid) AS count FROM {media_mover_files} WHERE cid = :cid AND step_order = :step_order GROUP BY status',
      array(':cid' => $configuration->cid, ':step_order' => $step->step_order + 1))->execute();
    while ($result = $results->fetchAssoc()) {
      $stats[$step->build['description']] = $result;
    }
  }
  return $stats;
}


/**
 * Return status string or strings.
 *
 * @param int $status
 *   value of status to return (optional)
 *
 * @return array
 *   Returns an array of statues or the string value for the specified status
 */
function media_mover_api_configuration_status($status = NULL) {
  $states = array(
    MMA_CONFIG_STATUS_DISABLED => t('Disabled'),
    MMA_CONFIG_STATUS_ENABLED => t('Enabled'),
    MMA_CONFIG_STATUS_DEFAULT => t('Default'),
    MMA_CONFIG_STATUS_OVERRIDDEN => t('Overridden'),
    MMA_CONFIG_STATUS_DEFAULT_DISABLED => t('Disabled'),
    MMA_CONFIG_STATUS_OVERRIDDEN_DISABLED => t('Disabled'),
  );
  if ($status) {
    return $states[$status];
  }
  return $states;
}


/**
 * Utility function to set the status of DB or code configuration.
 */
function media_mover_api_configuration_status_set($status, &$configuration) {
  // Ensure that we are changing the status correctly for
  // configurations in code.
  switch ($status) {
    case MMA_CONFIG_STATUS_ENABLED:
      // Is this configuration in code and in the default state?
      if ($configuration->status == MMA_CONFIG_STATUS_DEFAULT_DISABLED) {
        $status = MMA_CONFIG_STATUS_DEFAULT;
      }
      // Is this configuration in code and overridden?
      elseif ($configuration->status == MMA_CONFIG_STATUS_OVERRIDDEN_DISABLED) {
        $status = MMA_CONFIG_STATUS_OVERRIDDEN;
      }
      break;

    // No changes are needed for disabling.
    case MMA_CONFIG_STATUS_DISABLED:
      // Is this configuration in code and in the default state?
      if ($configuration->status == MMA_CONFIG_STATUS_DEFAULT) {
        $status = MMA_CONFIG_STATUS_DEFAULT_DISABLED;
      }
      // Is this configuration in code and overridden?
      elseif ($configuration->status == MMA_CONFIG_STATUS_OVERRIDDEN) {
        $status = MMA_CONFIG_STATUS_OVERRIDDEN_DISABLED;
      }
      break;
  }
  $configuration->status = $status;
}


/**
 * Utility function to load/unload code configurations.
 */
function media_mover_api_configurations_sync_code() {
  // Load configurations.
  media_mover_api_configurations_load_from_code();
  // Unload any missing defined configurations.
  media_mover_api_configurations_unload_from_code();
}


/**
 * Update the list of configurations defined in code.
 */
function media_mover_api_configurations_load_from_code() {
  // Load all configurations from the DB.
  $configurations = media_mover_api_configurations_load();
  // Load all configurations from code.
  $code_configurations = media_mover_api_configurations_fetch_in_code();
  foreach ($code_configurations as $cid => $code_configuration) {
    // Check to see if this configuration exists in the DB.
    if (!$configurations[$cid]) {
      // This configuration comes from code.
      $code_configuration->status = MMA_CONFIG_STATUS_DEFAULT;
      $code_configuration->save();
    }
  }
}


/**
 * Delete configurations defined in code but are not overridden in the DB.
 */
function media_mover_api_configurations_unload_from_code() {
  // Load all configurations from the DB.
  $configurations = media_mover_api_configurations_load();
  // Load all the code configurations.
  $code_configurations = media_mover_api_configurations_fetch_in_code();
  foreach ($configurations as $cid => $configuration) {
    // Search for configurations in code.
    if ($configurations[$cid]->status == MMA_CONFIG_STATUS_DEFAULT) {
      // Check to see if this code configuration exists.
      if (!$code_configurations[$cid]) {
        $configuration[$cid]->delete();
      }
    }
  }
}


/**
 * Fetches all configurations defined in code.
 *
 * @return array
 *   Array of configuration objects
 */
function media_mover_api_configurations_fetch_in_code($modules = FALSE) {
  if (!$modules) {
    $modules = module_list();
  }
  $configurations = array();
  foreach ($modules as $module) {
    $path = drupal_get_path('module', $module);
    $mask = "/.*\.media_mover_configuration.inc$/";
    $files = file_scan_directory($path, $mask);
    foreach ($files as $file) {
      $data = file_get_contents($file->filename);
      eval($data);
      // Validate the configuration.
      $configuration->settings['code'] = array(
        'module' => $module,
        'uri' => $file->filename,
        'status' => MMA_CONFIG_STATUS_DEFAULT,
      );
      $configurations[$configuration->cid] = $configuration;

      // @TODO this needs to have a test written for it
      // if (media_mover_api_configuration_code_validate($configuration)) {
      // $configurations[$configuration->cid] = $configuration;
      // }
      // else {
      // watchdog('media_mover_api', '%path was an invalid configuration.', array('%path' => $file->uri), WATCHDOG_ERROR);
      // }
    }
  }
  return $configurations;
}


/**
 * Gets a complete list of steps in the system.
 *
 * @return array
 *   Array of step objects
 */
function media_mover_api_steps_get() {
  $steps = array();
  $results = db_query('SELECT sid FROM {media_mover_steps}')->execute();
  while ($sid = $results->fetchField()) {
    $steps[$sid] = media_mover_api_step_get($sid);
  }
  return $steps;
}


/**
 * Retrieves the full data from a single step.
 *
 * @param string $sid
 *   Step id
 *
 * @return object
 *   Media Mover step
 */
function media_mover_api_step_get($sid) {
  static $steps = array();
  if (empty($steps[$sid])) {
    $step = new media_mover_step($sid);
    $steps[$sid] = $step;
  }
  return $steps[$sid];
}

/* ********************************************** */
/* Contrib Hooks                                  */
/* ********************************************** */

/**
 * Implements hook_media_mover().
 *
 * @return array
 */
function media_mover_api_media_mover() {
  $items = array();
  $items['source_file_reset'] = array(
    'description' => t('Util: Use source file'),
    'callback' => 'media_mover_api_step_source_file',
    'file' => 'plugins/source_file',
  );
  $items['directory_select'] = array(
    'description' => t('Select: from a local directory'),
    'callback' => 'media_mover_api_step_directories_select',
    'configuration' => 'media_mover_api_step_directories_select_config',
    'select' => TRUE,
    'file' => 'plugins/directories',
  );
  $items['directory_store'] = array(
    'description' => t('Store: to a local directory'),
    'callback' => 'media_mover_api_step_directories_store',
    'configuration' => 'media_mover_api_step_directories_store_config',
    'file' => 'plugins/directories',
  );
  return $items;
}


/* *************************************************************** */
/* Token functions */
/* *************************************************************** */

/**
 * Implements hook_token_list().
 */
function media_mover_api_token_list($type = 'all') {
  if ($type == 'media_mover_file' || $type == 'all') {
    $tokens['media_mover_file'] = array(
      'uri' => t('The uri of the current media mover file.'),
      'filename' => t('Sanitized name of the file.'),
      'entity_type' => t('The entity type this file is related to if it exists.'),
      'entity_id' => t('The entity id this file is related to if it exists.'),
      'fid' => t('Drupal file id if it exists'),
      'cid' => t('Media Mover configuration id (sanitized).'),
      'cid-raw' => t('Media Mover configuration id.'),
      'source_fid' => t('Drupal file id of the original file if it exists'),
      'source_uri' => t('The original file that was selected (sanitized).'),
      'source_uri-raw' => t('The original file that was selected.'),
      'destination' => t('The destionation where this file will be saved'),
      'files_directory' => t('The Drupal files directory.'),
      'media_mover_files_directory' => t('The Media Mover files directory.'),
    );
    return $tokens;
  }
}


/**
 * Implements hook_token_values().
 */
function media_mover_api_token_values($type, $object = NULL, $options = array()) {
  $tokens = array();
  if ($type == 'media_mover_file') {
    $tokens = array(
      'uri' => $object->uri,
      'filename' => check_plain(basename($object->uri)),
      'entity_type' => $object->entity_type,
      'entity_id' => $object->entity_id,
      'fid' => $object->fid,
      'cid' => check_plain($object->cid),
      'cid-raw' => $object->cid,
      'source_fid' => $object->source_fid,
      'source_uri' => check_plain($object->source_uri),
      'source_uri-raw' => $object->source_uri,
      // This has to be set adhoc.
      'destination' => $object->destination,
      'media_mover_files_directory' => media_mover_api_dir_path(),
      'files_directory' => file_directory_path(),
    );
  }
  return $tokens;
}

/* *************************************************************** */
/* Ctools functions */
/* *************************************************************** */

/**
 * @TODO these need to be implemented and tested.
 */

/**
 * Implements hook_ctools_plugin_api().
 *
 * Tell CTools that we support the default_mymodule_presets API.
 */
function media_mover_api_ctools_plugin_api($owner, $api) {
  if ($owner == 'media_mover' && $api == 'media_mover_configurations') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function media_mover_api_ctools_plugin_directory($module, $type) {
  if ($type == 'export_ui') {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_default_mymodule_preset().
 *
 * Provide a couple of default presets.
 *
 * @TODO this
 */
function media_mover_api_mma_export_configurationt() {
  $export = array();
  $preset = new stdClass();
  $preset->api_version = 1;
  $preset->name = 'media_mover_api_preset';
  $preset->description = 'Default media mover preset';
  $preset->mydata = 'x';
  $export['my_default_preset'] = $preset;
  return $export;
}
