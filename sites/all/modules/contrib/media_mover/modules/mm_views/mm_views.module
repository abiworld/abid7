<?php



/* ********************************************** */
/* Contrib Hooks                                  */
/* ********************************************** */

/**
 * Implements hook_media_mover().
 * @return array()
 */
function mm_views_media_mover() {
  $items = array();
  $items['mm_views_select'] = array(
    'description' => t('Select: files from a view'),
    'configuration' => 'mm_views_select_config',
    'callback' => 'mm_views_select',
    'select' => 1,
  );
  return $items;
}


/**
 * configuration options for harvesting from a view
 * @param $settings
 * @return array
 */
function mm_views_select_config($step) {
  $form['views_config'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select files from a view'),
    '#collapsed' => FALSE,
    '#collapsable' => TRUE,
  );

  // Get a list of views
  foreach (views_get_all_views() as $name => $view) {
    $views[$name] = $view->name;
  }
  $form['views_config']['view'] = array(
    '#type' => 'select',
    '#title' => t('Select view'),
    '#options' => $views,
    '#default_value' => $step->settings['view'],
    '#description' => t('Choose a view which outputs a list of files.
      Please note, if your view does not return a list of files,
      this step will fail.'
    )
  );
  $form['views_config']['stop_time'] = array(
    '#type' => 'radios',
    '#title' => t('Send last run time'),
    '#default_value' => isset($step->settings['stop_time']) ? $step->settings['stop_time'] : 'filter',
    '#options' => array(
      'argument' => t('Send time as an argument.'),
      'filter' => t('Add a time filter.'),
      'none' => t('Do not modify view.')
    ),
    '#description' => t('You can reduce the number of files considered
      by sending using the last time this step was run.<ul>
      <li><em>argument</em> will send the last time the step was run as an
      argument to your view</li>
      <li><em>filter</em> will filter the files list by the timestamp on the
      file. If the file was uploaded more recently than the last time this
      step was run it will be included</li>
      </ul>
      If you do not add the filter or argument function you will need to
      provide some mechanism to ensure that you do not select the same file
      multiple times. See the example view in the README.txt file for an
      example of a file harvesting view.'),
  );
  return $form;
}


/**
 * Select files with views
 *
 * @param $settings
 *   array
 * @return array
 */
function mm_views_select($step) {
  $files = array();
  // Get view specified
  $view = views_get_view($step->settings['view']);

  // Has this step been run before?
  if ($step->stop_time) {
    switch ($step->settings['stop_time']) {

      case 'filter':
        $handler = $view->new_display('default', 'Defaults', 'default');
        $handler->override_option('filters', array(
          'timestamp' => array(
            'operator' => '>',
            'value' => array(
              'type' => 'offset',
              'value' => $step->stop_time,
              'min' => '',
              'max' => '',
            ),
            'group' => '0',
            'exposed' => FALSE,
            'expose' => array(
              'operator' => FALSE,
              'label' => '',
            ),
            'id' => 'timestamp',
            'table' => 'files',
            'field' => 'timestamp',
            'relationship' => 'none',
          ),
        ));
        break;

      case 'argument':
        $view->set_arguments(array($step->stop_time));
        break;

      default:
      case 'none':
        break;
    }
  }

  // Now we can run the view
  $view->execute();

  // Loop through the results
  foreach ($view->result as $result) {
    // @NOTE not sure if this is going to hold true in all cases
    if (isset($result->files_filepath)) {
      $files[] = array(
        'filepath' => $result->files_filepath,
        'fid' => $result->fid,
      );
    }
  }

  return $files;
}


/* *************************************************************** */
/* VIEWS functions */
/* *************************************************************** */

/**
 * define media mover api tables to join
 *
 * @return array of tables
 */
function mm_views_views_tables() {
// @todo: Entity API, update
  $table = views_new_table('media_mover_files', 'internal', 'node', 'nid', 'nid');
  views_table_add_filter($table, 'cid', 'Media Mover: Configuration files', t('This will filter a view to nodes that have files with files generated by this Media Mover configuration.'),
    array(
      'list' => 'views_handler_filter_media_mover_api_list',
      'operator' => array('AND' => t('Has files from all'), 'OR' => t('Has files from any'), 'NOR' => t('Has files from none')),
      'handler' => 'views_handler_filter_media_mover_api_custom',
      'value-type' => 'array',
      'list-type' => 'multiselect',
     )
   );

  $tables[$table['name']] = $table;
  return $tables;
}


/**
 * Builds the config list for views
 * @return array of configurations
 */
function views_handler_filter_media_mover_api_list() {
  // get a list of all configurations
  $results = db_query('SELECT cid, name FROM {media_mover_config_list} ORDER BY cid')->execute();
  while ($config = $results->fetchObject()) {
    $mmconfig[$config->cid] = $config->name;
  }
  return $mmconfig;
}


/**
 * build the joins for the media mover config filter
 *
 * @param string $op
 * @param array $value
 * @param unknown_type $depth
 * @param unknown_type $query
 */
function views_handler_filter_media_mover_api_custom($op, $filter, $filterinfo, &$query) {

  $tablename = $query->get_table_name('media_mover_files', $num);
// @todo: Entity API, update
  $query->add_table($tablename, FALSE, 1, array('left' => array('table' => 'node', 'field' => 'nid'), 'right' => array('field' => 'nid')));

  // build the where clause
  switch ($filter['operator']) {
    case 'OR':
      $clause = "'" . implode("','", $filter['value']) . "'";
      $where = "$tablename.cid IN ($clause)";
      $query->add_where($where);
      break;

    case 'AND':
      foreach ($filter['value'] as $cid) {
        $clause[] = "$tablename.cid = $cid";
      }
      $query->add_where(implode(' AND ', $clause));
      break;

    case 'NOR':
      $clause = "'" . implode("','", $filter['value']) . "'";
      $where = "$tablename.cid NOT IN ($clause)";
      $query->add_where($where);
      break;

    default:
      $query->add_where('');
      break;
  }

}
