<?php

/**
 * @file
 */



/**
 * Implements hook_install().
 */
function media_mover_api_install() {
}


/**
 * Implements hook_uninstall().
 */
function media_mover_api_uninstall() {
  // @TODO delete any variables here
}


/**
 * Implements hook_schema().
 *
 */
function media_mover_api_schema() {
  $schema['media_mover_files'] = array(
    'description' => 'Holds file data for a specific  Media Mover file.',
    'fields' => array(
      'mmfid' => array('type' => 'serial'),
      'fid' => array('type' => 'int', 'unsigned' => TRUE, 'description' => 'Drupal file id'),
      'cid' => array('type' => 'varchar', 'length' => 255, 'default' => '', 'description' => 'Configuration machine name ID'),
      'step_order' => array('type' => 'int', 'unsigned' => TRUE, 'description' => 'Step order that this file is currently in'),
      'entity_type' => array(
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => '',
        'description' => 'The name of the source entity type for this file, NULL if not connected to any entity.',
      ),
      'entity_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The source entity id for this file.',
      ),
      'source_fid' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'description' => 'Drupal file id of originally selected file'
      ),
      'source_uri' => array(
        'type' => 'text',
        'size' => 'medium',
        'description' => 'Originally selected file',
      ),
      'uri' => array(
        'type' => 'text',
        'size' => 'medium',
        'description' => 'Current file uri',
      ),
     'status'  => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => NULL,
        'description' => 'What status is this file currently in?',
      ),
      'date' => array(
        'description' => 'The Unix timestamp when the file was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
      'lock_date' => array(
        'description' => 'The Unix timestamp when the file was locked.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'big',
        'serialize' => TRUE,
        'description' => 'All data associated with this file',
      ),
    ),
    'indexes' => array(
      'mmfid' => array('mmfid'),
      'cid' => array('cid'),
      'fid' => array('fid'),
      'cid, fid' => array('cid', 'fid'),
      'entity_type' => array('entity_type'),
      'entity_id' => array('entity_id'),
    ),
    'primary key' => array('mmfid')
  );

  $schema['media_mover_steps'] = array(
    'description' => 'Data for a specific step inside a Media Mover configuration.',
    'fields' => array(
      'sid' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' =>
        'Step machine name ID'
      ),
      'name' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => 'Name of the step'
      ),
      'module'  => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => ''
      ),
      'action_id'  => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => ''
      ),
      'settings'  => array(
        'serialize' => TRUE,
        'type' => 'text',
        'size' => 'medium',
        'description' => 'Serialize settings data for this step.',
      ),
      'cid' => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => '',
        'description' => 'Configuration machine name ID'
      ),
      'step_order' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'description' =>
        'Order that this step is in the configuration'
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => 'Empty or locked',
      ),
      'start_time'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
      'stop_time'  => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0
      ),
    ),
    'export' => array(
      'key' => 'sid',
      'identifier' => 'step',
      'default hook' => 'default_media_mover_api_step',  // Function hook name.
      'api' => array(
        'owner' => 'media_mover_api',
        'api' => 'default_media_mover_api_steps',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
      'object' => 'media_mover_step',
    ),
    'primary key' => array('sid'),
    'indexes' => array(
      'sid' => array('sid'),
    ),
  );

  $schema['media_mover_configurations'] = array(
    'description' => 'The Media Mover configuration description.',
    'fields' => array(
      'cid'  => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
        'description' => 'Configuration machine name ID'
      ),
      'name'  => array(
        'type' => 'varchar',
        'length' => 255,
        'default' => ''
      ),
      'description'  => array(
        'type' => 'text',
        'size' => 'normal'
      ),
      'status' => array(
        'type' => 'varchar',
        'length' => 255,
        'description' => 'One of: enabled, disabled, overridden',
      ),
      'settings'  => array(
        'serialize' => TRUE,
        'type' => 'text',
        'size' => 'medium',
        'description' => 'Serialized array of configuration data not specific to a step in the configuration.',
      ),
      'weight'  => array('type' => 'int', 'unsigned' => TRUE),
    ),
    'export' => array(
      'key' => 'cid',
      'identifier' => 'configuration', // Exports will be defined as $preset
      'default hook' => 'default_media_mover_api_configurations',  // Function hook name.
      'object' => 'media_mover_configuration',
      'api' => array(
        'owner' => 'media_mover_api',
        'api' => 'default_media_mover_api_configurations',  // Base name for api include files.
        'minimum_version' => 1,
        'current_version' => 1,
      ),
    ),
    'primary key' => array('cid'),
    'indexes' => array(
      'cid' => array('cid'),
    ),
  );

  // cache schema
  $schema['cache_media_mover'] = drupal_get_schema_unprocessed('system', 'cache');
  $schema['cache_media_mover']['description'] = 'Cache table for the Media Mover module to store configuration and entity data';

  return $schema;
}


/**
 * Updates from the 6.1x version
 *
 * @TODO implement this from 6.1 AND 6.2x
 */
function media_mover_api_7101() {
  /*
  SEE: http://drupal.org/node/428854
  media_mover_api.install
  Rename media_mover_configurations to media_mover_steps
  Rename media_mover_steps.verb to media_mover_steps.step
  Add media_mover_steps.name

  Rename media_mover_config_list to media_mover_configurations

  Update media_mover_files - move all files into a serialized files col

   */
}

/**
 * Update Schema for Entity API.
 *
 */
function media_mover_api_update_7102() {
  // Add entity_type field & add index
  if (!db_field_exists('media_mover_files', 'entity_type')) {
    db_add_field('media_mover_files', 'entity_type', array(
      'type' => 'varchar',
      'length' => 32,
      'not null' => TRUE,
      'default' => '',
      'description' => 'The name of the source entity type for this file, NULL if not connected to any entity.',
    ));
    db_add_index('media_mover_files', 'entity_type', array('entity_type'));

  }

  // Add entity_id field and copy nid into it & add index
  if (!db_field_exists('media_mover_files', 'entity_id')) {
    db_add_field('media_mover_files', 'entity_id', array(
      'type' => 'int',
      'unsigned' => TRUE,
      'not null' => FALSE,
      'default' => NULL,
      'description' => 'The source entity id for this file.',
    ));
    db_add_index('media_mover_files', 'entity_id', array('entity_id'));
  }

  // Populate entity_id = nid, entity_type = 'node' for set nid fields
  if (db_field_exists('media_mover_files', 'nid')) {
    switch (Database::getConnection()->databaseType()) {
      case 'mysql':
      case 'mysqli':
      case 'pqsql':
        db_query('UPDATE {media_mover_files} SET entity_id = nid, entity_type = \'node\' WHERE nid <> 0')->execute();
        break;
    }
  }
}

/**
 * Remove Schema for legacy nodes.
 *
 */
function media_mover_api_update_7103() {
  // Drop 'nid' field
  db_drop_field('media_mover_files', 'nid');
}

/**
 * Add source_fid field.
 *
 */
function media_mover_api_update_7104() {
  if (!db_field_exists('media_mover_files', 'source_fid')) {
    db_add_field('media_mover_files', 'source_fid', array(
      'type' => 'int',
      'unsigned' => TRUE,
      'description' => 'Drupal file id of originally selected file'
    ));
  }
}


/**
 * Update steps to the new action name.
 */
function media_mover_api_update_7105() {
  db_update('media_mover_steps') // Table name no longer needs {}
    ->fields(array(
      'action_id' => 'media_mover_api_step_source_file',
    ))
    ->condition('action_id', 'media_mover_api_restart_from_source')
    ->execute();
}


/**
 * Update steps to the new action name.
 */
function media_mover_api_update_7106() {
  db_update('media_mover_steps') // Table name no longer needs {}
    ->fields(array(
      'action_id' => 'directory_select',
      'module' => 'media_mover_api'
    ))
    ->condition('action_id', 'select')
    ->condition('module', 'mm_dir')
    ->execute();
}