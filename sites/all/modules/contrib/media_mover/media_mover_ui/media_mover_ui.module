<?php

/**
 * @file
 * This file contains all the UI elements for the Media mover
 * configuration adding, editing, etc.
 *
 */

/**
 * @TODO
 *   Step deletion does not work
 */


/* ****************************************** */
/* Drupal Hooks                               */
/* ****************************************** */


/**
 * Implements hook_menu().
 *
 * @return array
 */
function media_mover_ui_menu() {
  // ------------------------------------------------
  // MAIN TABS for admin/media_mover

  // Media Mover landing page.
  $items[MMA_MENU_PATH] = array(
    'title' => 'Media Mover',
    'page callback' => 'media_mover_ui_configurations_view',
    'access arguments' => array('administer media_mover'),
    'description' => 'Build and configure Media Mover operations',
    'weight' => -3,
  );

  // Settings main tab.
  $items[MMA_MENU_PATH . '/settings'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_mover_ui_admin_settings'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
  );

  // Settings main tab defaults.
  $items[MMA_MENU_PATH . '/settings/default'] = array(
    'title' => 'Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('media_mover_ui_admin_settings'),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );

  // -------------------------------------------------------
  // File menu items.

  // Files list.
  $items[MMA_MENU_PATH . '/files'] = array(
    'title' => 'Files',
    'page callback' => 'media_mover_ui_files_list',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
  );

  // Files list for a specific configuration.
  $items[MMA_MENU_PATH . '/files/configuration/%media_mover_api_configuration'] = array(
    'title' => 'Files',
    'page callback' => 'media_mover_ui_files_list',
    'page arguments' => array(MMA_MENU_PATH_LENGTH + 2, MMA_MENU_PATH_LENGTH + 4),
    'access arguments' => array('administer media_mover'),
  );

  // Files list for a specific status.
  $items[MMA_MENU_PATH . '/files/status'] = array(
    'title' => 'Files',
    'page callback' => 'media_mover_ui_files_list',
    'page arguments' => array(NULL, MMA_MENU_PATH_LENGTH + 2),
    'access arguments' => array('administer media_mover'),
    'type' => MENU_LOCAL_TASK,
  );


  // -------------------------------------------------------
  // Configuration menu items.

  // Add the configuration pages to the menu tree.
  $items[MMA_MENU_PATH . '/configuration'] = array(
    'title' => 'Configurations',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -3,
  );

  $items[MMA_MENU_PATH . '/configuration/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -3,
  );

  // Add a new configuration.
  $items[MMA_MENU_PATH . '/configuration/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array('media_mover_ui_config_edit_form'),
    'type' => MENU_LOCAL_ACTION,
    'weight' => -2,
  );

  // Configuration landing page.
  $items[MMA_MENU_PATH . '/configuration/%media_mover_api_configuration'] = array(
    'title' => 'Configuration',
    'title callback' => 'media_mover_ui_menu_configuration_title_callback',
    'title arguments' => array(MMA_MENU_PATH_LENGTH + 1),
    'position' => 'left',
    'page callback' => 'media_mover_ui_configuration_view',
    'page arguments' => array(MMA_MENU_PATH_LENGTH + 1),
    'access arguments' => array('administer media_mover'),
    'weight' => -9,
  );

  // Do not want to render tabs unless this is a config page.
  // Configuration view tab.
  $items[MMA_MENU_PATH . '/configuration/%media_mover_api_configuration/view'] = array(
    'title' => 'Configuration',
    'title callback' => 'media_mover_ui_menu_configuration_title_callback',
    'title arguments' => array(MMA_MENU_PATH_LENGTH + 1),
    'position' => 'left',
    'page callback' => 'media_mover_ui_configuration_view',
    'page arguments' => array(MMA_MENU_PATH_LENGTH + 1),
    'access arguments' => array('administer media_mover'),
    'weight' => -9,
  );

  // Edit tab for a configuration.
  $items[MMA_MENU_PATH . '/configuration/%media_mover_api_configuration/edit'] = array(
    'title' => 'Edit Configuration',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array('media_mover_ui_config_edit_form', MMA_MENU_PATH_LENGTH + 1),
  );

  // Run tab for a configuration.
  $items[MMA_MENU_PATH . '/configuration/%media_mover_api_configuration/run'] = array(
    'title' => 'Run',
    'page callback' => 'media_mover_ui_configuration_run',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array(MMA_MENU_PATH_LENGTH + 1),
  );

  // Reset all the step statuses.
  $items[MMA_MENU_PATH . '/configuration/%media_mover_api_configuration/steps_reset'] = array(
    'title' => 'Reset steps',
    'page callback' => 'media_mover_ui_config_steps_reset',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(MMA_MENU_PATH_LENGTH + 1),
  );

  // Change the status of a media mover configuration (enable/disable).
  $items[MMA_MENU_PATH . '/configuration/%media_mover_api_configuration/status'] = array(
    'title' => 'Status change',
    'page callback' => 'media_mover_ui_configuration_status_change',
    'access arguments' => array('administer media_mover'),
    'type' => MENU_CALLBACK,
    'page arguments' => array(MMA_MENU_PATH_LENGTH + 1, MMA_MENU_PATH_LENGTH + 3),
  );

  // Delete an existing configuration.
  $items[MMA_MENU_PATH . '/configuration/%media_mover_api_configuration/delete'] = array(
    'title' => 'Confirm Configuration Deletion',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array('media_mover_ui_config_delete_confirm', MMA_MENU_PATH_LENGTH + 1),
    'type' => MENU_CALLBACK,
  );

  // Empty an existing configuration of files.
  $items[MMA_MENU_PATH . '/configuration/%media_mover_api_configuration/empty'] = array(
    'title' => 'Confirm Configuration Files Deletion',
    'page callback' => 'media_mover_ui_config_empty_confirm',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array(MMA_MENU_PATH_LENGTH + 1),
    'type' => MENU_CALLBACK,
  );

  // Clone an existing configuration.
  $items[MMA_MENU_PATH . '/configuration/%media_mover_api_configuration/clone'] = array(
    'title' => 'Clone Configuration',
    'page callback' => 'media_mover_ui_config_clone',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array(MMA_MENU_PATH_LENGTH + 1),
  );

  // -------------------------------------------------------
  // File tasks

  // Edit a file.
  $items[MMA_MENU_PATH . '/file/%media_mover_api_mmfile/edit'] = array(
    'title callback' => 'media_mover_ui_menu_file_title_callback',
    'title arguments' => array(MMA_MENU_PATH_LENGTH + 1),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array('media_mover_ui_edit_file_form', MMA_MENU_PATH_LENGTH + 1),
  );

  // Delete a file.
  $items[MMA_MENU_PATH . '/file/%media_mover_api_mmfile/delete'] = array(
    'title' => 'Delete File',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer media_mover'),
    'page arguments' => array('media_mover_ui_file_delete_confirm_form', MMA_MENU_PATH_LENGTH + 1),
  );

  return $items;
}


/**
 * Implements hook_permission().
 *
 * @return array
 */
function media_mover_ui_permission() {
  return array(
    'administer media_mover' => array(
      'title' => t('administer media_mover'),
      'description' => t('Administer Media Mover configuration'),
    ),
  );
}


/**
 * Implements hook_theme().
 *
 * @return unknown_type
 */
function media_mover_ui_theme() {
  return array(
    'media_mover_ui_configuration_action_select' => array(
      'render element' => 'element',
      'file' => 'media_mover_ui.theme.inc',
    ),
    'media_mover_ui_configurations_list' => array(
      'variables' => array('configurations' => NULL),
      'template' => 'theme/media-mover-configurations',
    ),
    'media_mover_ui_configuration_landing' => array(
      'variables' => array('header_ops' => NULL, 'configuration' => NULL, 'content' => NULL, 'ops' => NULL),
      'template' => 'theme/media-mover-configuration',
      'file' => 'media_mover_ui.theme.inc',
    ),
    'media_mover_ui_configuration_wrapper' => array(
      'variables' => array('header_ops' => NULL, 'configuration' => NULL, 'content' => NULL),
      'template' => 'theme/media-mover-configuration-wrapper',
      'file' => 'media_mover_ui.theme.inc',
    ),
    'media_mover_ui_configuration_view_header' => array(
      'variables' => array('configuration' => NULL),
      'file' => 'media_mover_ui.theme.inc',
    ),
  );
}


/* ************************************************ */
/* Menu functions                       */
/* ************************************************ */

/**
 * menu helper to get the name of the configuration into the menu tab
 * @param object $configuration
 *   Media mover configuration object
 * @return string
 */
function media_mover_ui_menu_configuration_title_callback($configuration) {
  if (!empty($configuration)) {
    return $configuration->name;
  }
}


/**
 * Display file edit title
 *
 * @param $file
 *   Object, Media Mover
 * @return string
 */
function media_mover_ui_menu_file_title_callback($file) {
  if (!empty($file)) {
    return t('Edit Media Mover file: !id', array('!id' => $file->mmfid));
  }
}


/* ****************************************** */
/* Admin pages                                */
/* ****************************************** */

/**
 * Media Mover administration functions.
 *
 * Place holder to let other modules modify the form and add their own options.
 * Previously this used a hook, that has been deprecated.
 *
 * @return array
 */
function media_mover_ui_admin_settings(&$form, &$form_state) {
  $form = array();
  $form['admin'] = array(
    '#markup' => t('These settings set the default value for all configurations.
      Settings can be overridden on a per configuration basis by editing the
      configuration and changing the option values under the <em>advanced</em>
      option.')
  );
  $form = system_settings_form($form);
  // Weight the buttons down so other modules can insert their elements
  $form['buttons']['#weight'] = 9;
  return $form;
}


/* ****************************************** */
/* ADD / EDIT configuration forms             */
/* ****************************************** */


/**
 * Add/Edit a configuration.
 *
 * @TODO wrap this in the MM Configuration wrapper.
 *
 * @param array $form
 * @param array $form_state
 * @param object $configuration
 *   Object, media mover conifiguration
 *
 * @return array drupal form
 */
function media_mover_ui_config_edit_form($form, &$form_state, $configuration = NULL) {
  drupal_add_css(drupal_get_path('module', 'media_mover_ui') . '/media_mover_ui.css');
  drupal_add_js(drupal_get_path('module', 'media_mover_ui') . '/media_mover_ui.js');

  // If a configuration is already being created or edited
  if (!empty($form_state['storage']['configuration'])) {
    $configuration = $form_state['storage']['configuration'];
  }
  // If a configuration ID is not passed, build a new one
  elseif (!$configuration) {
    $configuration = new media_mover_configuration();
    $form_state['storage']['configuration'] = $configuration;
  }
  // When a configuration is being edited, store a copy into the form
  elseif ($configuration) {
    $form_state['storage']['configuration'] = $configuration;
  }

  // Set the configuration value so that it is accessible by modules that
  // implement hook_form_alter()
  $form['#configuration'] = $configuration;

  // Stock configuration elements
  $form['configuration'] = array(
    '#type' => 'fieldset',
    '#title' => t('Configuration name'),
    '#collapsible' => TRUE,
    '#collapsed' => empty($configuration->name) ? FALSE : TRUE,
    '#tree' => TRUE,
  );
  $form['configuration']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name your configuration'),
    '#description' => t('Give a descriptive name to your configuration'),
    '#default_value' => $configuration->name,
    '#required' => TRUE,
  );
  $form['configuration']['cid'] = array(
    '#type' => 'machine_name',
    '#label' => t('Machine name for your configuration'),
    '#machine_name' => array(
      'exists' => 'media_mover_api_configuration_machine_name_exists',
      'source' => array('configuration', 'name')
    ),
    '#default_value' => $configuration->cid,
  );
  $form['configuration']['description'] = array(
    '#type' => 'textarea',
    '#title' => t('Describe your configuration'),
    '#description' => t('Enter a description for your configuration.'),
    '#default_value' => $configuration->description,
  );

  $form['steps'] = array(
    '#tree' => TRUE
  );

  // Build the steps form
  if ($configuration->steps) {
    // Reorder the steps if steps are added or deleted.
    $step_index = 0;
    $collapsed = TRUE;
    foreach ($configuration->steps as $step_order => $step) {
      if ($configuration->step == $step_order) {
        $collapsed = FALSE;
      }

      // Ensure that all required files are loaded.
      if ($step->build['file']) {
        form_load_include($form_state, 'inc', $step->build['module'], $step->build['file']);
      }

      // Get all step configuration forms
      $form['steps'][$step_index] = media_mover_ui_config_step_form($step, $step_index, $collapsed);
      $step_index++;
    }
  }

  // Wrap the action selector in a specificly themed display
  // @TODO this is not functional
  // $form['next']['select_action']['#theme'] = 'media_mover_ui_configuration_action_select';

  // If we are on the first step, display the select options
  if (!count(element_children($form['steps']))) {
    // Only retrieve the select actions
    $actions = media_mover_ui_configuration_form_select_builder(MMA_ACTION_TYPE_SELECT);
    $message = t('Choose the files you would like to use');
  }
  else {
    // Get all non-select actions
    $actions = media_mover_ui_configuration_form_select_builder(MMA_ACTION_TYPE_NORMAL);
    $message = t('Choose your next action');
  }

  $form['next']['select_action']['action_choice'] = array(
    '#type' => 'select',
    '#title' => $message,
    '#options' => $actions,
    '#default_value' => isset($action) ? $action : NULL,
    '#attributes' => array('style' => 'float: left;'),
  );

  // Add another action to the configuration
  $form['next']['select_action']['configure'] = array(
    '#type' => 'submit',
    '#value' => t('Add step'),
    '#submit' => array('media_mover_ui_config_step_add'),
  );

  // Only show the configuration save button if there is a step
  if (!empty($form['steps'][0])) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save configuration'),
      '#weight' => 10,
    );
  }
  return $form;
}


/**
 * Validate a submitted configuration form.
 *
 * @param $form
 * @param $form_state
 */
function media_mover_ui_config_edit_form_validate($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Add step')) {
    if (!$action_choice = $form_state['values']['action_choice']) {
      form_set_error('action_choice', t('You need to chose a step to add'));
    }
  }

  // Ensure that new configurations have a unique name
  if ($form_state['clicked_button']['#value'] == t('Save configuration')) {
    if (!empty($form_state['storage']['configuration']->new)) {
      // Check for uniqueness of the new configurations name
      $query = db_select('media_mover_configurations', 'mmc');
      $query->condition('mmc.name', $form_state['values']['configuration']['name']);
      $query->addExpression('COUNT(name)', 'name_count');
      $result = $query->execute()->fetchAssoc();
      if ($result['name_count']) {
        form_set_error('name', t('The name you have choosen for your configuration is already in use, please use another.'));
      }
    }
  }
}


/**
 * Save a media mover configuration.
 *
 * @TODO this is completely ugly. It attempts to handle add/edit cases but this
 *       maybe a wrong approach because of the complexity of handling any changed
 *       data in the form against an existing configuration
 */
function media_mover_ui_config_edit_form_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#value'] == t('Save configuration')) {
    // @NOTE the CID passed validation so it should be unique, however there is
    //       a possibility that there could be another configuration of the same
    //       name be saved at the same time.

    // @NOTE Load configuration or get a new stub configuration - should work for add/edit
    $configuration = new media_mover_configuration($form_state['values']['configuration']['cid']);

    // Extract any configuration data for the configuration
    foreach ($form_state['values']['configuration'] as $key => $value) {
      // $steps stored on $form_state['values']['configuration'] are arrays-
      // add them below correctly
      if ($key != 'steps') {
        // Merge the settings as we may not have a ui for some of them.
        if ($key == 'settings' && is_array($configuration->{$key})) {
          $configuration->{$key} = array_replace_recursive($configuration->{$key}, $form_state['values']['configuration']['settings']);
        }
        else {
          $configuration->{$key} = $value;
        }
      }
    }

    // Extract step data
    if ($form_state['values']['configuration']['steps']) {
      // Index to renumber steps.
      foreach ($form_state['values']['configuration']['steps'] as $step_order => $values) {

        // Create the step or load the existing one
        $step = new media_mover_step($values);
        // @todo: redundand code (the above "new media_mover_step($values)" already copies all values into $step->...)
        // Step meta data is stored as an array, extract it into the step
        foreach ($values as $key => $value) {
          $step->{$key} = $value;
        }

        // Add the updated step to the configuration
        $configuration->steps[$step_order] = $step;
      }
    }

    // Save the configuration
    $configuration->save();

    // @TODO handle edit vs. add
    drupal_set_message(t('Media mover configuration %name !created.', array('%name' => $configuration->name, '!created' => $configuration->new ? 'created' : 'updated')));
    // Redirect the user to the configuration landing page
    $form_state['redirect'] = MMA_MENU_PATH . '/configuration/' . $configuration->cid . '/view';

  }
}

/**
 * Utility function to fix the form tree.
 *
 * This will reparent all the form elements so they are under
 * $form['configuration']['steps'][step_order]['settings'] regardless of #tree
 * being set to TRUE for fieldsets defined in the returned form.
 *
 * @param string $key
 * @param array $element
 * @param array $parents
 */
function media_mover_ui_fix_element_parents($key, &$element, $parents) {
  if (!empty($element['#type'])) {
    if ($element['#type'] == 'fieldset') {
      $element['#parents'] = $parents;
      $element['settings'][$key]['#tree'] = TRUE;
    }
  }
  foreach (element_children($element) as $key) {
    media_mover_ui_fix_element_parents($key, $element[$key], $parents);
  }
}

/**
 * Configuration form for an individual step.
 *
 * @param $action_data
 *   Array, all of the defined action data from the module
 * @param $step_order
 *   Integer, current step
 * @param $display
 *   Boolean, display this action
 * @param $displayed
 *   Boolean, should this fieldset be open?
 * @return $form
 */
function media_mover_ui_config_step_form($step, $step_order, $collapsed = FALSE) {
  // Fieldset for the settings for this action. We have to figure out
  // if this fieldset should be displayed. We display it if it is the last action.
  $form = array(
    '#type' => 'fieldset',
    '#title' => t('Step !order: !name', array(
        '!order' => $step_order + 1,
        '!name' => $step->name
      )
    ),
    '#collapsible' => TRUE,
    '#collapsed' => $collapsed,
    '#tree' => TRUE,
  );

  $form['meta'] = array(
    '#type' => 'fieldset',
    '#title' => t('Step name'),
    '#description' => t('Provide a unique name for this step. This is done automatically unless you want to specify it.'),
    '#collapsed' => TRUE,
    '#collapsible' => TRUE,
    '#parents' => array('configuration', 'steps', $step_order),
  );

  // @todo Should we even let steps get asigned names?
  $form['meta']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Step name'),
    '#default_value' => $step->name,
    '#description' => t('Give your step a name which describes what it does.'),
    '#required' => TRUE,
  );
  $form['meta']['sid'] = array(
    '#type' => 'machine_name',
    '#title' => t('Step machine name'),
    '#default_value' => !empty($step->sid) ? $step->sid : media_mover_api_machine_name_create($step->name, 'step'),
    '#machine_name' => array(
      'source' => array('steps', $step_order, 'meta', 'name'),
      'exists' => 'media_mover_api_step_machine_name_exists'
    )
  );

  $form['meta']['build'] = array(
    '#type' => 'value',
    '#value' => $step->build
  );

  $form['meta']['new'] = array(
    '#type' => 'value',
    '#value' => $step->new
  );

  // Get the configuration form from this step
  if ($form['settings'] = $step->configuration_form()) {
    foreach (element_children($form['settings']) as $key) {
      media_mover_ui_fix_element_parents($key, $form['settings'][$key],
        array('configuration', 'steps', $step_order, 'settings')
      );
    }
  }
  else {
    $form['settings'] = array(
      '#weight' => -1,
      '#markup' => '<div>' . t('There are no settings for this action') . '</div>',
    );
  }

  return $form;
}


/**
 * Add a new step to the configuration
 *
 * @TODO need to have a mechanism to reset all the existing files from a
 *       configuration so that they can be run.
 *
 * @param type $form
 * @param array $form_state
 */
function media_mover_ui_config_step_add(&$form, &$form_state) {
  // Get the configuration
  $configuration = $form_state['storage']['configuration'];

  // If this is the first step do not advance the step count.
  if ($configuration->step) {
    $configuration->step_advance();
  }
  // Get the configuration for this step
  $build = media_mover_api_action_build_get($form_state['values']['action_choice']);
  $build['step_order'] = $configuration->step;
  $build['original_step_order'] = $configuration->step;
  // Create a stub step so that we can call the configuration function
  $configuration->steps[] = new media_mover_step($build);
  $form_state['rebuild'] = TRUE;
}


/**
 * Reset a configuration form.
 *
 * @param object $configuration
 *   Media mover configuration object
 *
 * @return array drupal form
 */
function media_mover_ui_config_empty_confirm($form, $form_state, $configuration) {
  $form['markup'] = array(
    '#markup' => t('You are about to empty:<br /> %config_name <br />
      %config_description <br /><br />' .
      'This removes Media Mover\'s references to items created by this
      configuration and will delete any files created (unless you choose to not
      delete them). Doing this will take all of this configuration\'s media off
      line. <br /><br />
      Please only do this if you are debuging an installation or have very good
      reasons for wanting to do so.<br /><br />.',
      array('%config_name' => $configuration->name, '%config_description' => $configuration->description)
    ),
  );

  $form['configuration'] = array(
    '#type' => 'value',
    '#value' => $configuration
  );
  $form['confirm_delete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Delete this configuration\'s files'),
    '#description' => t('If this is checked, all files created by this
      configuration will also be removed'),
    '#default_value' => TRUE,
  );
  return confirm_form(
    $form,
    t('Are you sure you want to empty this configuration and remove references to its files?'),
    MMA_MENU_PATH,
    t('This action cannot be undone.'),
    t('Empty'),
    t('Cancel'),
    'confirm'
  );
}


/**
 * Deletes a configuration submission this only deletes the records of files.
 *
 * @param string $form_id
 * @param array $form_state
 */
function media_mover_ui_config_empty_confirm_submit($form, &$form_state) {
  $configuration = $form_state['values']['configuration'];
  if ($form_state['values']['confirm_delete']) {
    $configuration->delete_files();
    drupal_set_message(t('Deleted files associated with this configuration'));
  }
  $configuration->reset();
  drupal_set_message(t('Reset the configuration. Removed all of Media Mover\'s
    file references for this configuration. <b>Please note</b>: Files will not
    be completely removed until the queue has been completed. You can !run to
    force the queue to empty.', array(
      '!run' => l(t('run cron manually'), 'admin/reports/status/run-cron', array('query' => array('destination' => MMA_MENU_PATH . '/configuration/' . $configuration->cid . '/view'))))
    )
  );
  $form_state['redirect'] = MMA_MENU_PATH . '/configuration/' . $configuration->cid . '/view';
}


/**
 * Delete a configuration confirm form.
 *
 * @param array $drupal_form
 *   drupal form - this is a place holder because of
 * @param object $configuration
 *   Media mover configuration object
 * @return array
 *   drupal form array
 */
function media_mover_ui_config_delete_confirm($form, $form_state, $configuration) {
  $output = t('You are about to delete:<br /> %config_name <br />
    %config_description <br />', array(
      '%config_name' => $configuration->name,
      '%config_description' => $configuration->description
  ));
  $output .= t('This will also delete references to files, and the files that
    Media Mover has created with this configuration.');
  $form['markup'] = array(
    '#markup' => $output,
  );
  $form['configuration'] = array(
    '#type' => 'value',
    '#value' => $configuration,
  );
  return confirm_form(
    $form,
    t('Are you sure you want to delete this configuration?'),
    MMA_MENU_PATH . '/configuration/' . $configuration->cid . '/view',
    t('This action cannot be undone and will remove ALL files created by this configuration'),
    t('Delete'),
    t('Cancel'),
    'media_mover_api_config_delete_confirm'
  );
}


/**
 * Delete a configuration
 */
function media_mover_ui_config_delete_confirm_submit($form_id, &$form_state) {
  $configuration = $form_state['values']['configuration'];
  $configuration->delete();
  if (!empty($configuration->messages)) {
    $content = theme('table', array(
      'header' => array(t('Type'), t('Message')),
      'rows' => $configuration->messages
    ));
  }
  else {
    $content = t('Deleted the configuration.');
  }

  drupal_set_message($content);
  $form_state['redirect'] = MMA_MENU_PATH;
}


/* ************************************************ */
/* Configuration Form Helper functions              */
/* ************************************************ */

/**
 * Helper function to build a select list from the actions that
 * are currently on the system.
 * @param $type
 *   kind of actions to return.
 * @return array
 */
function media_mover_ui_configuration_form_select_builder($type) {
  $list = array();
  // Loop through the actions to build a nice array of options
  if ($actions = media_mover_api_actions_build_get($type)) {
    foreach ($actions as $id => $action) {
      $list[$id] = $action['description'];
    }
  }
  asort($list);
  $return = array_merge(array('-- ' . t('Please choose an option') . ' --'), $list);
  return $return;
}


/**
 * Provides a list of all
 *
 * @TODO placeholder for now
 * @param $type
 * @return unknown_type
 */
function media_mover_ui_steps_select_get($type = NULL) {

}


/* ****************************************** */
/* Configuration viewing                      */
/* ****************************************** */


/**
 * Display information about media_mover modules and existing configurations
 */
function media_mover_ui_configurations_view() {
  // Reload all configurations
  media_mover_api_configurations_sync_code();

  // Add the css file
  drupal_add_css(drupal_get_path('module', 'media_mover_ui') . '/media_mover_ui.css');

  $output = array();

  // Get all the configurations
  if ($configurations = media_mover_api_configurations_load()) {
    foreach ($configurations as $configuration) {
      // Get the operations for this configuration
      $configuration->ops = theme('media_mover_ui_configuration_view_header', array('configuration' => $configuration));
      // Get a text name of the configuration status
      $configuration->status_name = media_mover_api_configuration_status($configuration->status);
      // Build the configuration statistics
      $stats = array();
      // Get the total number of files for this config
      $stats[] = l(t('Files: !count', array('!count' => $configuration->file_count())), MMA_MENU_PATH . '/files/configuration/' . $configuration->cid);
      $stats[] = t('Errors: !count', array('!count' => $configuration->file_count(MMA_FILE_STATUS_ERROR)));
      // Get the in process file count
      $stats[] = t('Running: !count', array('!count' => $configuration->file_count(MMA_FILE_STATUS_LOCKED)));

      // Get the last start time:
      if (!empty($configuration->start_time)) {
        $time = t('running since: !time', array('!time' => date('M j, Y g:ia', $configuration->start_time)));
      }
      elseif (!empty($configuration->last_start_time)) {
        $time = date('M j, Y g:ia', $configuration->last_start_time);
      }
      else {
        $time = t('never');
      }
      $stats[] = t('Last start time: !time', array('!time' => $time));

      $configuration->stats = implode(' | ', $stats);
      $output[] = $configuration;
    }
  }
  // There are no configurations in the system
  else {
    return t('There are no configurations in the system. Please !create one.', array(
      '!create' => l(t('create'), MMA_MENU_PATH . '/configuration/add'))
    );
  }
  return theme('media_mover_ui_configurations_list', array('configurations' => $output));
}


/**
 * Creates the landing page for an individual configuration
 *
 * @param $configuration
 *   Object, Media Mover configuration object
 */
function media_mover_ui_configuration_view($configuration) {
  $content = '';
  // Add the css file
  drupal_add_css(drupal_get_path('module', 'media_mover_ui') . '/media_mover_ui.css');
  $cid = $configuration->cid;

  drupal_set_title($configuration->name);

  // Create the list of actions you can take with this configuration
  $links = array(
    l(t('View files'), MMA_MENU_PATH . "/files/configuration/$cid"),
  );
  if (module_exists('mm_export')) {
    $links[] = l(t('Export configuration'), MMA_MENU_PATH . "/configuration/export/$cid");
  }
  $links += array(
    l(t('Reset all step statuses'), MMA_MENU_PATH . "/configuration/$cid/steps_reset"),
    l(t('Purge files created by this configuration'), MMA_MENU_PATH . "/configuration/$cid/empty"),
    l(t('Delete configuration'), MMA_MENU_PATH . "/configuration/$cid/delete"),
    l(t('Clone configuration'), MMA_MENU_PATH . "/configuration/$cid/clone"),
  );
  $ops = theme('item_list', array('items' => $links));

  // Get a text name of the configuration status
  $configuration->status_name = media_mover_api_configuration_status($configuration->status);

  if ($configuration->steps) {
    $header = array(t('Step'), t('Name'), t('Status'));
    $rows = array();
    foreach ($configuration->steps as $step) {
      // Status for each step
      $rows[] = array($step->step_order + 1, $step->build['description'], $step->status);
    }
    $content = theme('table', array('header' => $header, 'rows' => $rows));
  }

  // Get the operations for this configuration
  $header_ops = theme('media_mover_ui_configuration_view_header', array('configuration' => $configuration));

  $stats = array();
  // Get the file count
  $stats[] = l($configuration->file_count(), MMA_MENU_PATH . "/files/configuration/$cid");
  $stats[] = l($configuration->file_count(MMA_FILE_STATUS_FINISHED), MMA_MENU_PATH . "/files/configuration/$cid/status/" . MMA_FILE_STATUS_FINISHED);
  // Get the in process file count
  $stats[] = l(t('!count being processed', array('!count' => $configuration->file_count(MMA_FILE_STATUS_LOCKED))), MMA_MENU_PATH . "/files/configuration/$cid/status/" . MMA_FILE_STATUS_LOCKED);
  // Get the in process file count
  $stats[] = l(t('!count errors', array('!count' => $configuration->file_count(MMA_FILE_STATUS_ERROR))), MMA_MENU_PATH . "/files/configuration/$cid/status/" . MMA_FILE_STATUS_ERROR);

  $header = array(t('Total files'), t('Completed'), t('In process'), t('Error'));
  $content .= theme('table', array('header' => $header, 'rows' => array($stats)));

  return theme('media_mover_ui_configuration_landing', array(
    'header_ops' => $header_ops,
    'configuration' => $configuration,
    'content' => $content,
    'ops' => $ops
  ));
}


/* ****************************************** */
/* Configuration operations                   */
/* ****************************************** */

/**
 * Landing page for running a configuration.
 *
 * @param $configuration
 *   Object, Media Mover object
 */
function media_mover_ui_configuration_run($configuration) {
  $content = '';
  drupal_set_time_limit(0);
  drupal_add_css(drupal_get_path('module', 'media_mover_ui') . '/media_mover_ui.css');

  $configuration->run();
  if (!empty($configuration->messages)) {
    $content = '<h3>' . t('Running your configuration reported these messages:') . '</h3>';
    $content .= theme('table', array(
      'header' => array(t('Type'), t('Step'), t('Message')),
      'rows' => $configuration->messages)
    );
  }
  else {
    drupal_set_message(t('This configuration was run successfully.'));
  }

  $header_ops = theme('media_mover_ui_configuration_view_header', array('configuration' => $configuration));
  return theme('media_mover_ui_configuration_wrapper', array(
    'header_ops' => $header_ops,
    'configuration' => $configuration,
    'content' => $content
  ));
}


/**
 * Utility function to set status of a media mover configuration.
 *
 * @param $configuration
 *   Object, media mover configuration
 * @param $status
 *   String, status to set the configuration to
 */
function media_mover_ui_configuration_status_change($configuration, $status) {
  if (!$status) {
    drupal_set_message(t('No new status was provided for the configuration.'), 'error');
    return;
  }

  // Ensure that we are changing the status correctly for
  // configurations in code
  switch ($status) {
    case MMA_CONFIG_STATUS_ENABLED:
    case MMA_CONFIG_STATUS_DISABLED:
      media_mover_api_configuration_status_set($status, $configuration);
      break;

    // Reverting is a special case
    case 'revert':
      // Revert this configuration
      if (media_mover_api_configuration_code_revert($configuration)) {
        drupal_set_message(t('Configuration %name has been reverted.', array('!name' => $configuration->name)));
        // Return user to referrer
        drupal_goto($_SERVER['HTTP_REFERER']);
      }
      // Error condition
      break;
  }

  // Save it
  $configuration->save();
  drupal_set_message(t('Configuration %name status has been updated.', array('%name' => $configuration->name)));

  drupal_goto($_SERVER['HTTP_REFERER']);
}


/**
 * Resets all the steps in a configuration.
 *
 * @param object $configuration
 *   Media mover configuration object
 */
function media_mover_ui_config_steps_reset($configuration) {
  $configuration->steps_reset();
  drupal_set_message(t('All steps statuses have been reset'));
  drupal_goto(MMA_MENU_PATH . '/configuration/' . $configuration->cid . '/view');
}


/**
 * Clone an existing configuration.
 *
 * @param object $configuration
 *   Media mover configuration object
 */
function media_mover_ui_config_clone($configuration) {
  $clone = clone $configuration;
  // Create a new configuration when this is saved
  $clone->new = TRUE;
  // Increment the machine name
  $clone->cid = media_mover_api_machine_name_create($clone->cid);
  $clone->name = $clone->name . ' ' . t('clone');
  // All steps need to have their machine names changed to allow
  // for all step editing
  foreach ($clone->steps as $step) {
    $step->cid = $clone->cid;
    // Create a new step when this is saved
    $step->new = TRUE;
    // Create a new SID for this
    $step->sid = media_mover_api_machine_name_create($step->sid, 'step');
  }
  $clone->save();
  drupal_set_message(t('Configuration has been cloned'));
  drupal_goto(MMA_MENU_PATH . '/configuration/' . $clone->cid . '/edit');
}


/* ****************************************** */
/* File operations                            */
/* ****************************************** */


/**
 * Displays files associated with configuration.
 *
 * @param object $configuration
 *   Media Mover configuration object
 * @return string
 *   Rendered page
 */
function media_mover_ui_files_list($configuration = FALSE, $status = FALSE) {
  $rows = array();
  drupal_add_css(drupal_get_path('module', 'media_mover_ui') . '/media_mover_ui.css');

  $query = db_select('media_mover_files', 'mmf')
    ->extend('PagerDefault')
    ->fields('mmf')
    ->limit(10)
    ->orderBy('mmf.date');
  if ($configuration) {
    $query->condition('mmf.cid', $configuration->cid, '=');
  }
  if ($status) {
    // DB layer prevents from SQL injection attack
    $query->condition('mmf.status', $status, '=');
  }
  $results = $query->execute();

  foreach ($results as $result) {
    $file = new media_mover_file();
    $file->load(FALSE, $result);
    if ($configuration) {
      $conf = $configuration;
    }
    else {
      $conf = media_mover_api_configuration_load($file->cid);
    }
    $rows[] = array(
      l($file->mmfid, MMA_MENU_PATH . '/file/' . $file->mmfid . '/edit', array('query' => drupal_get_destination())),
      $file->get_entity_link(),
      $file->source_uri,
      $file->uri,
      isset($conf->steps[$file->step_order]) ? $conf->steps[$file->step_order]->build['description'] : t('NA'),
      $file->status,
      l($conf->name, MMA_MENU_PATH . '/configuration/' . $conf->cid),
      format_date($file->date),
    );
  }

  $header = array(
    array('data' => t('ID')),
    array('data' => t('Entity')),
    array('data' => t('Selected file')),
    array('data' => t('Current file')),
    array('data' => t('Current Step')),
    array('data' => t('Status')),
    array('data' => t('Configuration')),
    array('data' => t('Date')),
  );

  $content = theme('table', array('header' => $header, 'rows' => $rows)) . theme('pager');

  // If this is the general files page, just output it.
  if (!$configuration) {
    return $content;
  }

  // For files selected from a specific configuration, add media_mover_ui_configuration_view_header
  $header_ops = theme('media_mover_ui_configuration_view_header', array('configuration' => $configuration));
  return theme('media_mover_ui_configuration_wrapper', array(
    'header_ops' => $header_ops,
    'configuration' => $configuration,
    'content' => $content)
  );
}



/**
 * Edit a single file form.
 *
 * @param object $file
 *   Media mover file object
 *
 * @return array drupal form array
 */
function media_mover_ui_edit_file_form($form, &$form_state, $file) {
  // if the file isn't finished set an alert
  if ($file->status != MMA_FILE_STATUS_FINISHED) {
    drupal_set_message(t('This item has not been finished by Media Mover. Current status is: %status',
      array('%status' => media_mover_api_file_status($file->status))),
      'error'
    );
  }

  $form = array();
  // Set the mmfid
  $form['mmfid'] = array(
    '#type' => 'hidden',
    '#value' => $file->mmfid
  );

  // Get the configuration.
  $configuration = media_mover_api_configuration_load($file->cid);

  // Get each of the actions for this configuration
  if (!empty($configuration->steps)) {
    foreach ($configuration->steps as $step_order => $step) {
      $file_link = $file->get_link($step_order);
      $rows[] = array(
        t('Step: %name', array('%name' => $step->name)),
        t('File: !file', array('!file' => $file_link))
      );
    }
    // build the header
    $header = array(array('data' => t('Configuration: %name', array('%name' => $configuration->name)), 'colspan' => 2));
    $form['title'] = array(
      '#markup' => theme('table', array('header' => $header, 'rows' => $rows))
    );
  }

  // Display
  $form['additonal'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional file data'),
    '#description' => t('Data that is attached to the file while it is being
      processed'),
    '#value' => print_r($file->data, TRUE),
    '#attributes' => array('readonly' => 'readonly'),
    '#rows' => 10,
  );

  // Entity API
  $entity_type_options = array();
  foreach (entity_get_info() as $entity_type => $entity_info) {
    $entity_type_options[$entity_type] = $entity_info['label'];
  }
  $form['file']['entity'] = array(
    '#type' => 'fieldset',
    '#title' => t('Entity'),
  );
  $form['file']['entity']['entity_type'] = array(
    '#title' => t('Entity type'),
    '#type' => 'select',
    '#options' => $entity_type_options,
    '#default_value' => !empty($file->entity_type) ? $file->entity_type : NULL,
    '#description' => t('File is associated with this Entity type. You can assocate a Media Mover file with one Entity type/ID.'),
  );
  // @todo: Add javascript to switch entity id <-> entity name and autofill JS popup
  $form['file']['entity']['entity_id'] = array(
    '#title' => t('Entity ID'),
    '#type' => 'textfield',
    '#default_value' => !empty($file->entity_id) ? $file->entity_id : NULL,
    '#description' => t('File is associated with this Entity ID. You can assocate a Media Mover file with one Entity type/ID'),
  );

  $options = media_mover_api_file_status();
  $form['file']['status'] = array(
    '#title' => t('Current File Status'),
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $file->status,
    '#description' => t('Sets the status that the file is in. Should be
      <em>Finished<em> unless the file is stuck or actively being processed.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('media_mover_ui_edit_file_form_delete_submit'),
  );
  return $form;
}


/**
 * File edit form submit.
 *
 * @param $form
 * @param $form_state
 */
function media_mover_ui_edit_file_form_submit($form, &$form_state) {

  $file = new media_mover_file($form_state['values']['mmfid']);
  // @TODO: Implement validation that entity type/id exist.
  $file->entity_type = $form_state['values']['entity_type'];
  $file->entity_id = $form_state['values']['entity_id'];
  if ($file->status != $form_state['values']['status']) {
    $file->status_set('*', $form_state['values']['status']);
    $file->status = $form_state['values']['status'];
  }
  $file->save();
  drupal_set_message(t('Media mover file ID: !id was updated.', array('!id' => $form_state['values']['mmfid'])));
  $form_state['redirect'] = MMA_MENU_PATH . '/files/configuration/' . $file->cid;
}


/**
 * Helper function to redirect the admin to the file delete confirmation page.
 *
 * @param $form
 * @param $form_state
 */
function media_mover_ui_edit_file_form_delete_submit($form, &$form_state) {
  // Redirect to the delete confirm.
  unset($_GET['destination']);
  drupal_static_reset('drupal_get_destination');
  $form_state['redirect'] = MMA_MENU_PATH . '/file/' . $form_state['values']['mmfid'] . '/delete';
}


/**
 * Delete file confirm form.
 *
 * @param object $file
 *   Media mover file object
 *
 * @return array drupal confirm
 */
function media_mover_ui_file_delete_confirm_form($form, &$form_state, $file) {
  $form['display_data'] = array(
    '#markup' => t('You are about to delete file %file (id# %fid).', array('%file' => $file->uri, '%fid' => $file->mmfid)),
  );
  $form['mmfid'] = array(
    '#type' => 'hidden',
    '#value' => $file->mmfid,
  );
  return confirm_form($form,
    t('Are you sure you want to delete this file?'),
    MMA_MENU_PATH . '/files',
    t('This action cannot be undone.'),
    t('Delete'),
    t('Cancel')
  );
}


/**
 * Deletes single file.
 *
 * @param $form
 * @param $form_values is drupal form array
 */
function media_mover_ui_file_delete_confirm_form_submit($form, &$form_state) {
  // get the file
  $file = media_mover_api_mmfile_load($form['mmfid']['#value']);
  $file->delete();
  drupal_set_message(t('Deleted the file.'));
  // @todo: this leads to 'page not found' if the configuration was deleted.
  $form_state['redirect'] = MMA_MENU_PATH . '/files/configuration/' . $file->cid;
}


/**
 * Utility function changes form tree values into $key => $value pairs
 *
 * @param $form_part
 * @param $values
 */
function media_mover_ui_form_element_values_extract($form_part, $values) {
  $output = array();
  // This is going to be a serious problem when somebody wants to
  // use non-standard form element for a value.
  $useable_types = array('select', 'checkbox', 'textfield', 'textarea', 'checkboxes', 'password', 'radios');
  if (is_array($values)) {
    foreach ($values as $key => $value) {
      // Does this key match up with a usable form element
      if (in_array($form_part[$key]['#type'], $useable_types)) {
        // If the value is an array, we have to extract the keys
        if (is_array($value)) {
          $output[$key] = array_values($value);
        }
        // Strings map correctly
        else {
          $output[$key] = $value;
        }
      }
      // Does this element have any children?
      if ($children = element_children($form_part[$key])) {
        if ($return = media_mover_ui_form_element_values_extract($form_part[$key], $values[$key])) {
          $output = array_merge($output, $return);
        }
      }
    }
    return $output;
  }
}


/* *********************************** */

/**
 * Implements array_replace_recursive for php < 5.3
 *
 * This function does not exist in php versions less than php 5.3 See:
 * http://www.php.net/manual/en/function.array-replace-recursive.php
 */
if (!function_exists('array_replace_recursive')) {
  function array_replace_recursive($array, $array1) {
    function recurse($array, $array1) {
      foreach ($array1 as $key => $value) {
        // create new key in $array, if it is empty or not an array
        if (!isset($array[$key]) || (isset($array[$key]) && !is_array($array[$key]))) {
          $array[$key] = array();
        }

        // Overwrite the value in the base array
        if (is_array($value)) {
          $value = recurse($array[$key], $value);
        }
        $array[$key] = $value;
      }
      return $array;
    }

    // Handle the arguments, merge one by one
    $args = func_get_args();
    $array = $args[0];
    if (!is_array($array)) {
      return $array;
    }
    for ($i = 1; $i < count($args); $i++) {
      if (is_array($args[$i])) {
        $array = recurse($array, $args[$i]);
      }
    }
    return $array;
  }
}
