<?php


/**
 * @file
 * Module install
 */

/**
 * Implements hook_requirements().
 */
function search_api_attachments_requirements($phase) {
  $requirements = array();
  $t = get_t();
  if ($phase == 'runtime') {
    // We only need to test Java if we're using a local tika extractor.
    if (variable_get('search_api_attachments_extract_using', 'tika') == 'tika') {
      $temp = tempnam(file_directory_temp(), 'asa');
      $cmd = 'java -version > ' . $temp . ' 2>&1';
      if (strpos(ini_get('extension_dir'), 'MAMP/')) {
        $cmd = 'export DYLD_LIBRARY_PATH=""; ' . $cmd;
      }
      exec($cmd);
      $stderror = file_get_contents($temp);
      $found = preg_match('/Runtime Environment/', $stderror);

      if (!$found) {
        $requirements['search_api_attachments_java']  = array(
          'title' => $t('Java executable not found'),
          'description' => $t('Could not execute a java command.  You may need to set the path of the correct java executable as the variable \'apachesolr_attachments_java\' in settings.php.'),
          'severity' => REQUIREMENT_ERROR,
        );
      }
    }
  }
  return $requirements;
}

/**
 * Implements hook_uninstall().
 */
function search_api_attachments_uninstall() {
  variable_del('search_api_attachments_tika_path');
  variable_del('search_api_attachments_tika_jar');
}

/**
 * Implements hook_schema().
 */
function search_api_attachments_schema() {
  // Create a standard Drupal cache table.
  // We'll be using this store file extractions.
  $schema['cache_search_api_attachments'] = drupal_get_schema_unprocessed('system', 'cache');
  return $schema;
}

/**
 * Add a cache table to store file extractions.
 */
function search_api_attachments_update_7101() {
  if (!db_table_exists('cache_search_api_attachments')) {
    $schema = search_api_attachments_schema();
    db_create_table('cache_search_api_attachments', $schema['cache_search_api_attachments']);
  }
}
